[tool:pytest]
# Pytest configuration for resume-generator-auto-applier

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output options
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --disable-warnings
    --cov=src
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --html=htmlcov/report.html
    --self-contained-html

# Markers for test categorization
markers =
    unit: Unit tests that don't require external dependencies
    integration: Integration tests that may require external services
    web: Tests that require web scraping or browser automation
    slow: Tests that take longer than 5 seconds to run
    api: Tests that require API keys or external API calls
    mock: Tests that use mocked external dependencies
    skip_ci: Tests that should be skipped in CI environments

# Test timeout (in seconds)
timeout = 300

# Minimum version requirements
minversion = 6.0

# Test environment
env =
    TESTING = true
    DEBUG = false
    HEADLESS_MODE = true
    ENABLE_BROWSER_MONITORING = false
    SUPPRESS_CONSOLE_WARNINGS = true

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */site-packages/*
    */migrations/*
    */settings/*
    */manage.py
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
